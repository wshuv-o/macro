Sub ExtractCashFlowSheetsTEST()
    Dim sourceWorkbook As Workbook
    Dim sheet As Worksheet
    Dim newSheet As Worksheet
    Dim newSheetName As String
    Dim invalidChars As String
    Dim i As Integer
    Dim sheetCounter As Integer
    Dim folderPath As String
    Dim fileName As String
    Dim frm As UserForm1
    Dim fileCount As Integer
    Set frm = UserForm1
    
    ' Select the folder containing .xlsm files
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Select the Folder Containing .xlsm Files"
        If .Show = -1 Then
            folderPath = .SelectedItems(1) & "\"
        Else
            MsgBox "No folder selected. Operation cancelled.", vbExclamation
            Exit Sub
        End If
    End With

    ' Count the number of .xlsm files in the folder
    fileName = Dir(folderPath & "*.xlsm")


    fileCount = 0
    Do While fileName <> ""
        fileCount = fileCount + 1
        fileName = Dir ' Get the next file
    Loop

    ' Initialize the form with the number of files
    frm.InitializeForm fileCount ' Initialize form with file count
    frm.Show

    ' Loop through all the .xlsm files in the selected folder
    fileName = Dir(folderPath & "*.xlsm") ' Get the first file again
    Application.ScreenUpdating = False

    Do While fileName <> ""
        sheetCounter = 1
        Set sourceWorkbook = Workbooks.Open(folderPath & fileName, ReadOnly:=True)
        
        For Each sheet In sourceWorkbook.Sheets
            ' Check if the sheet name contains "Cash Flow" but does not contain "Details" or "Footnote"
            If sheet.Name Like "*Cash Flow*" And Not sheet.Name Like "*Aggregate Cash Flow*" _
                And Not sheet.Name Like "*Cash Flow Detail*" And Not sheet.Name Like "*Cash Flow Footnote*" Then

                ' Suppress alerts to prevent duplicate named range warnings
                Application.DisplayAlerts = False
                sheet.Copy After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)
                Application.DisplayAlerts = True ' Re-enable alerts

                Set newSheet = ActiveSheet
                newSheetName = newSheet.Range("H5").value

                ' Remove invalid characters from the sheet name
                invalidChars = "/\?*:[]"
                For i = 1 To Len(invalidChars)
                    newSheetName = Replace(newSheetName, Mid(invalidChars, i, 1), "")
                Next i

                ' Trim name length and append counter for uniqueness
                If Len(newSheetName) > 25 Then
                    newSheetName = Left(newSheetName, 25)
                End If
                newSheetName = newSheetName & " (" & sheetCounter & ")"
                sheetCounter = sheetCounter + 1

                ' Attempt renaming with error handling
                On Error Resume Next
                newSheet.Name = newSheetName
                If Err.Number <> 0 Then
                    MsgBox "Error renaming sheet to '" & newSheetName & "'. Please check for invalid characters or length."
                    Err.Clear
                End If
                On Error GoTo 0 ' Reset error handling
            End If
        Next sheet

        sourceWorkbook.Close False
        
        ' Increment the progress and update the form after processing the current file
        'frm.IncrementCount ' Increment count after each file is processed
        'frm.UpdateProgress ' Update progress bar
        fileName = Dir ' Get the next file
    Loop

    Application.ScreenUpdating = True
    MsgBox "Cash Flow sheets extracted and renamed successfully!", vbInformation
End Sub


-----
Option Explicit

Public countValue As Integer
Public previousBlock As Integer
Public value As Integer

' Initializes the form with the total value (file count)
Public Sub InitializeForm(initialValue As Integer)
    value = initialValue
    countValue = 0 ' Initialize counter
    previousBlock = 0 ' Initialize previous block for progress bar
    Me.lblCounter.Caption = "0%" ' Set initial caption for counter
    Me.lblProgressBar.Caption = String(0, ChrW(9632)) ' Set initial progress bar to empty
End Sub

' Updates the counter and progress bar
Public Sub UpdateProgress()
    Dim percentage As Double
    percentage = (countValue / value) * 100 ' Calculate the percentage of completion

    ' Update the label with the current percentage
    Me.lblCounter.Caption = Int(percentage) & "%"

    ' Update progress bar every 5%
    If Int(percentage / 5) > previousBlock Then
        previousBlock = Int(percentage / 5)
        Me.lblProgressBar.Caption = String(previousBlock, ChrW(9632)) ' Update progress bar
    End If

    ' Close the form if 100% is reached
    If percentage >= 100 Then
        Me.lblCounter.Caption = "100%" ' Ensure counter shows 100%
        Me.lblProgressBar.Caption = String(20, ChrW(9632)) ' Fill the progress bar
        Me.CloseF ' Close the form
    End If
End Sub

' Increments the count value and schedules next update
Public Sub IncrementCount()
    countValue = countValue + 1 ' Increment the counter
End Sub

' Close the form
Public Sub CloseF()
    Unload Me
End Sub


Private Sub UserForm_Click()

End Sub
